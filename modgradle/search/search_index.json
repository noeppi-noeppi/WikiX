{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"ModGradle wiki","text":"<p>ModGradle is a collection of gradle plugins for NeoForge mod development.</p>"},{"location":"index.html#use-modgradle","title":"Use ModGradle","text":"<p><code>settings.gradle</code>:</p> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven { url = 'https://maven.neoforged.net/releases' }\n        maven { url = 'https://maven.moddingx.org/release' }\n    }\n}\n</code></pre> <p><code>build.gradle</code>:</p> <pre><code>plugins {\n    id 'org.moddingx.modgradle.meta' version '&lt;version&gt;'\n}\n</code></pre>"},{"location":"index.html#plugins","title":"Plugins","text":"<p>ModGradle contains multiple separate plugins which provide its functionality:</p> <ul> <li><code>org.moddingx.modgradle.meta</code>: This plugin helps to easily configure a NeoForge userdev environment.</li> <li><code>org.moddingx.modgradle.javadoc</code>: This plugin gives some more configuration options to javadoc generation.</li> </ul>"},{"location":"javadoc/index.html","title":"The javadoc plugin","text":"<p>The javadoc plugin (<code>org.moddingx.modgradle.javadoc</code>) requires <code>java-library</code> and enhances the javadoc generation in your project.</p>"},{"location":"javadoc/index.html#javadocletmeta","title":"JavaDocletMeta","text":"<p>Without any further configuration, the javadoc plugin will run JavaDocletMeta on your code and produce javadoc in a machine readable json format in th <code>meta</code> directory under you doc base.</p>"},{"location":"javadoc/index.html#configure-the-included-packages","title":"Configure the included packages","text":"<p>The <code>javadocConfigure</code> task allows you to configure, which packages to include in the javadoc. It can be configured via the following methods:</p> <ul> <li><code>from(Object)</code>: Add the given files to the javadoc sources.</li> <li><code>exclude(String)</code>: Exclude a package pattern from the javadoc.</li> <li><code>include(String)</code>: Include a package pattern from the javadoc.</li> </ul> <p>The patterns for <code>exclude</code> and <code>include</code> should be package names where each component can also have one of these special values:</p> <ul> <li><code>*</code>: Matches exactly one wildcard component.</li> <li><code>**</code>: Matches at least one wildcard component.</li> <li><code>*?</code>: Matches any number of wildcard components.</li> </ul> <p>The table below shows some examples on when a wildcard matches:</p> <code>some.pkg</code> <code>some.pkg.*</code> <code>some.pkg.**</code> <code>some.pkg.*?</code> <code>some.pkg</code> matches does not match does not match matches <code>some.pkg.a</code> does not match matches matches matches <code>some.pkg.a.b</code> does not match does not match matches matches <p>A package is excluded from the javadoc exactly when it is matched by the exclude rules and not matched by the include rules.</p>"},{"location":"javadoc/index.html#linking-to-remote-javadoc","title":"Linking to remote javadoc","text":"<p>The <code>javadocLinks</code> task allows to load external javadoc sources, the generated javadoc should link to. It can be configured via the following methods:</p> <ul> <li><code>config(URI)</code>: Sets the URI from where to obtain the javadoc links config.</li> <li><code>namespace(String)</code>: Adds the given namespace to the list of included namespaces.</li> </ul> <p>If no config is set, the javadoc plugin will check, whether the <code>meta</code>-plugin is applied as well. If this is the case the javadoc links will be auto-configured based on the values set in the <code>meta</code>-plugin, loading links from here. If the <code>meta</code>-plugin is not applied and no config URI is set, no external linking will take place.</p>"},{"location":"javadoc/index.html#format-of-javadoc-link-config","title":"Format of javadoc link config","text":"<p>The javadoc link config must be a json file in UTF-8 encoding. It mus contain a json object at the root level. Each key in this object defines a namespace of links to include. The value of each namespace must be a list of javadoc link resources.</p> <p>A javadoc link resource then has one of two forms: * <code>{\"url\":\"&lt;uri&gt;\"}</code>: A simple linkage to a remote URI. * <code>{\"url\":\"&lt;url&gt;\",\"res\":\"&lt;uri&gt;\"}</code>: A linkage, where the javadoc is built on demand and therefore can't be used for linking at javadoc build time. <code>res</code> instead contains a URI pointing to a jar-file with the built javadoc of the artifact. ModGradle will use th contents of the <code>res</code> file to generate links pointing to <code>url</code>.</p>"},{"location":"meta/index.html","title":"The meta plugin","text":"<p>The meta plugin is meant to easily set up a mod development environment with minimal clutter in the gradle buildscripts. The plugin adds a <code>mod</code>-extension to the project which allows you to configure almost the complete build setup with a single call to <code>mod.configure</code>. Note that the meta plugin is not meant to cover every use case and possibility in which you want a development environment to be set up but is meant to cover the needs for most simple mods only.</p> <p>After running <code>mod.configure</code>, the <code>mod</code> extension holds some useful properties that should be useful in customizing the build even further.</p>"},{"location":"meta/index.html#configuring-the-build","title":"Configuring the build","text":"<p><code>mod.configure</code> accepts a closure with a lot of options and methods to be called on. These are documented under build setup. A simple example could look like this:</p> <pre><code>mod.configure {\n    modid 'examplemod'\n    neoforge '21.1.65'\n    license 'MIT'\n    github 'ExampleModGuy/ExampleMod'\n    publishing {\n        maven { url 'https://maven.examplemodguy.org/'  }\n    }\n    artifacts {\n        sources {\n            publishToRepositories()\n        }\n    }\n}\n</code></pre> <p>The mod configuration page lists all available options in the <code>mod.configure</code> block.</p>"},{"location":"meta/properties.html","title":"Mod properties","text":"<p>After the build has been configured by <code>mod.configure</code>, the <code>mod</code> extension provides access to some properties useful for further build configuration.</p> <ul> <li><code>modid</code> contains the mod is of the mod.</li> <li><code>name</code> is an alias for <code>project.name</code>. This is mainly useful for template expansion in the <code>processResources</code> step.</li> <li><code>group</code> is an alias for <code>project.group</code>. This is mainly useful for template expansion in the <code>processResources</code> step.</li> <li><code>version</code> is an alias for <code>project.version</code>. This is mainly useful for template expansion in the <code>processResources</code> step.</li> <li><code>minecraft</code> contains the Minecraft version used to build the mod.</li> <li><code>neoforge</code> contains the NeoForge version used to build the mod.</li> <li><code>java</code> contains the targeted java version for the build. If not manually set, this is inferred from the Minecraft version.</li> <li><code>resource</code> contains the resource pack version that is current in the Minecraft version used to build the mod.</li> <li><code>data</code> contains the datapack version that is current in the Minecraft version used to build the mod.</li> <li><code>license</code> contains the license of the mod.</li> <li><code>timestamp</code> contains the commit timestamp of the current <code>HEAD</code>. This is only available if the project is located inside a git repository.</li> <li><code>changelog</code> contains the generated changelog listing all commits since the last version.</li> <li><code>source_url</code> contains the URL to browsable source code of the mod. This is only available if set in the <code>git</code> block during <code>mod.configure</code>.</li> <li><code>issue_url</code> contains the URL pointing to the mod issue tracker. This is only available if set in the <code>git</code> block during <code>mod.configure</code>.</li> </ul> <p>Properties can be accessed using <code>mod['property_name']</code> and in template expansion also as <code>mod.property_name</code>.</p>"},{"location":"meta/setup.html","title":"Mod configuration","text":"<p>Here follows an overview over all available options inside <code>mod.configure</code> that can be used to configure the build.</p>"},{"location":"meta/setup.html#modid","title":"modid","text":"<p>This sets the mod id of the mod. It is a required property. Example:</p> <pre><code>modid 'examplemod'\n</code></pre>"},{"location":"meta/setup.html#neoforge","title":"neoforge","text":"<p>Sets the version of NeoForge used to compile the mod. It is a required property. Example:</p> <pre><code>minecraft '21.1.66'\n</code></pre>"},{"location":"meta/setup.html#minecraft","title":"minecraft","text":"<p>Sets the minecraft version used to build the mod. ModGradle will try to automatically detect the minecraft version from the NeoForge version. This function exists mainly as a fallback to be used when ModGradle fails with that. Example:</p> <pre><code>minecraft '1.21.1'\n</code></pre>"},{"location":"meta/setup.html#java","title":"java","text":"<p>Sets the java version, the build targets. ModGradle can automatically detect the java version from the minecraft version. This function exists for the case that a mod needs to target a different java version than the minecraft version it is made for for some reason.</p> <pre><code>java 21\n</code></pre>"},{"location":"meta/setup.html#license","title":"license","text":"<p>Sets the name of the project license. It is a required property. Example:</p> <pre><code>license 'MIT'\n</code></pre>"},{"location":"meta/setup.html#group","title":"group","text":"<p>The <code>group</code> property just sets the project group. If not explicitly set, the previous value of the project group will be used. Example:</p> <pre><code>group 'example.somegroup'\n</code></pre>"},{"location":"meta/setup.html#version","title":"version","text":"<p>Using <code>version</code> is an alias for constant versioning. It sets the project version to the provided value. Example:</p> <pre><code>version '1.0.0'\n</code></pre>"},{"location":"meta/setup.html#versioning","title":"versioning","text":"<p>ModGradle can infer the project version using different strategies. The used strategy can be configured in the versioning block. Example:</p> <pre><code>versioning {\n    base '0-DEVELOPMENT'\n    gitTag()\n}\n</code></pre> <p>The options available in the <code>versioning</code> block are documented below:</p>"},{"location":"meta/setup.html#constant","title":"constant","text":"<p>Sets the project version to a constant version. Example:</p> <pre><code>versioning {\n    constant '1.0.0'\n}\n</code></pre>"},{"location":"meta/setup.html#base","title":"base","text":"<p>This property sets the base version. Depending on the used strategy, its meaning can be different. See below.</p>"},{"location":"meta/setup.html#maven","title":"maven","text":"<p>Allows to infer the next free version number from a maven repository. For example</p> <pre><code>versioning {\n    base '1.2'\n    maven 'https://maven.examplemodguy.org/'\n}\n</code></pre> <p>In this example, ModGradle looks at all versions of the mod published in the provided maven repository, find the largest number <code>x</code> such that <code>1.2.x</code> is a published version and sets the project version to <code>1.2.y</code> where <code>y</code> is <code>x</code> + 1.</p>"},{"location":"meta/setup.html#gittag","title":"gitTag","text":"<p>Allows to set the project version from a git tag. Calling <code>gitTag()</code> will look at the git tag pointing to the current <code>HEAD</code>. If there is one, it will be picked as the version number. Otherwise, the base version is used as a fallback.</p>"},{"location":"meta/setup.html#modsources","title":"modSources","text":""},{"location":"meta/setup.html#git","title":"git","text":"<p>The <code>git</code> block allows to set some information on where the mods source code and issue tracker can be found. Example:</p> <pre><code>git {\n    github 'ExampleModGuy/ExampleMod'\n}\n</code></pre> <p>The options available in the <code>git</code> block are documented below:</p>"},{"location":"meta/setup.html#url-clone-issues","title":"url, clone, issues","text":"<p>These properties set the browsable URL, the URI to clone the repository and the URL pointing to the issue tracker respectively. Example:</p> <pre><code>git {\n    url 'https://github.com/ExampleModGuy/ExampleMod'\n    clone 'https://github.com/ExampleModGuy/ExampleMod.git'\n    issues 'https://github.com/ExampleModGuy/ExampleMod/issues'\n}\n</code></pre>"},{"location":"meta/setup.html#commitformat","title":"commitFormat","text":"<p>This sets a format string used in <code>git log</code> to format a target link for git commits in generated changelogs. It can use regular <code>git log</code> format substitutions. Example:</p> <pre><code>git {\n    commitFormat 'https://github.com/ExampleModGuy/ExampleMod/commit/%H'\n}\n</code></pre>"},{"location":"meta/setup.html#github-gitlab","title":"github, gitlab","text":"<p>Shorthand commands to fill the git properties with values suited for a specific service. In both cases, the format is <code>username/repository</code>. Example:</p> <pre><code>git {\n    github 'ExampleModGuy/ExampleMod'\n    gitlab 'ExampleModGuy/ExampleMod'\n}\n</code></pre> <p>These functions also exist as top-level function and don't need to be embedded in a <code>git</code> block.</p>"},{"location":"meta/setup.html#mappings","title":"mappings","text":"<p>The <code>mappings</code> block allows to configure the mappings used in the build. By default, the build will use the latest parchment version that is available. Example:</p> <pre><code>mappings {\n    official()\n}\n</code></pre> <p>The options available in the <code>git</code> block are documented below:</p>"},{"location":"meta/setup.html#official","title":"official","text":"<p>Tells ModGradle to use the official mappings provided by Mojang without any parchment.</p>"},{"location":"meta/setup.html#parchment","title":"parchment","text":"<p>Another block that can be used to configure the parchment version. Example:</p> <pre><code>mappings {\n    parchment {\n        minecraft '1.21'\n        version '2024.07.28'\n    }\n}\n</code></pre>"},{"location":"meta/setup.html#changelog","title":"changelog","text":"<p>Can be used to change the code used to generate the changelog on mod publish. By default, ModGradle uses <code>git log</code> to generate its changelog and tries to detect the commit range from the current environment. This behaviour can be overridden by supplying a <code>Closure</code> that yields a string with the changelog. Example:</p> <pre><code>changelog { \"This is some dummy changelog text that\" }\n</code></pre>"},{"location":"meta/setup.html#artifacts","title":"artifacts","text":"<p>The <code>artifacts</code> block allows to configure additional artifacts. There are currently two additional artifacts that can be built: <code>sources</code> and <code>javadoc</code>. Each artifact can also be configured to be published to maven and/or uploaded to mod hosting websites. Example:</p> <pre><code>artifacts {\n    sources {\n        publishToRepositories()\n        uploadToModHostingSites()\n    }\n    javadoc {}\n}\n</code></pre> <p>In this example, both sources and javadoc jar-files will be created during the build process. However, only the sources will get published to maven and uploaded to mod hosting websites.</p>"},{"location":"meta/setup.html#resources","title":"resources","text":"<p>The <code>resources</code> block allows to specify in which files parameter expansion should take place. By default, parameters are expanded in <code>META-INF/neoforge.mods.toml</code>. Additional patterns can be added using <code>expandIn</code> and existing patterns can be removed using <code>noExpand</code>. Example:</p> <pre><code>resources {\n    noExpand()\n    expandIn 'pack.mcmeta'\n}\n</code></pre> <p>Expansion always adds the <code>mod</code> extension itself as a parameter, so all mod properties can be accessed.</p>"},{"location":"meta/setup.html#runs","title":"runs","text":"<p>This allows configuration of the runs. By default ModGradle uses a suitable default configuration for runs. If this is not desired, it can be turned off using <code>noAutoConfig()</code>. To configure the runs, there are methods <code>all</code>, <code>client</code>, <code>server</code>, <code>data</code> and <code>gameTestServer</code> where the first one configures all runs and the others just configure their respective run. The closures passed to these functions are directly passed to NeoGradle.</p>"},{"location":"meta/setup.html#publishing","title":"publishing","text":"<p>The <code>publishing</code> block configures repositories to publish to in the <code>publish</code> task. The provided closure is used to configure a gradle repository handler, so the usual repository handler methods can be used.</p>"},{"location":"meta/setup.html#upload","title":"upload","text":"<p>The <code>upload</code> block configures upload to mod hosting sites. Currently, ModGradle supports upload to CurseForge using CurseForgeGradle and Modrinth using Minotaur. Each mod hosting site is configured in its own sub-block. It is also possible to use an <code>all</code> block to configure all uploads at once. Example:</p> <pre><code>upload {\n    all {\n        type 'release'\n        require 'a-cool-dependency'\n    }\n    curseforge {\n        projectId 12345\n        dontInferDefaultVersions()\n        version '1.20.1'\n    }\n    modrinth {\n        projectId 'abcde'\n    }\n}\n</code></pre> <p>ModGradle provides an <code>upload</code> task to perform the uploads. The following options are available:</p>"},{"location":"meta/setup.html#projectid","title":"projectId","text":"<p>Sets the project id on the mod hosting website. </p>"},{"location":"meta/setup.html#type","title":"type","text":"<p>Sets the release type of the upload. One of <code>alpha</code>, <code>beta</code> or <code>release</code>. Defaults to <code>alpha</code>.</p>"},{"location":"meta/setup.html#dontinferdefaultversions","title":"dontInferDefaultVersions","text":"<p>Stop ModGradle from inferring default supported minecraft or java versions.</p>"},{"location":"meta/setup.html#version-require-optional","title":"version, require, optional","text":"<p>Adds a supported minecraft version, an optional or required dependency.</p>"},{"location":"meta/setup.html#secretenv","title":"secretEnv","text":"<p>Sets the name of the environment variable that contains the token used for the upload. This defaults to <code>CURSEFORGE_UPLOAD_TOKEN</code> or <code>MODRINTH_UPLOAD_TOKEN</code>.</p>"},{"location":"meta/setup.html#cfgradle-minotaur","title":"cfgradle, minotaur","text":"<p>These options allow to pass code directly to CurseForgeGradle or Minotaur.</p>"}]}