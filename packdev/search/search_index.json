{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PackDev wiki","text":"<p>PackDev is a gradle plugin for creating and building modpacks. It supports both CurseForge and Modrinth and can build modpacks for Forge, Fabric, Quilt and NeoForge.</p> <p>Modpacks are often developed using a third party launcher that then exports the modpack in some format for publishing. However, tis comes with a lot of disadvantages:</p> <ul> <li>Contributing to the modpack via pull requests is hard, especially if the pull request wants to alter the modlist.</li> <li>Often only one modpack format is supported for export.</li> <li>In most cases the export contains unnecessary overrides like configs that have not been changed.</li> <li>Adding differences between a client and a server version is hard.</li> </ul> <p>PackDev tries to solve these issues by using gradle as a build system. This also has the advantage that you can make use of pre-existing gradle plugins for automatic publishing of modpacks through CurseForgeGradle or Minotaur.</p>"},{"location":"index.html#apply-packdev-to-your-build","title":"Apply PackDev to your build","text":"<pre><code>buildscript {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url = 'https://maven.moddingx.org/' }\n        maven { url = 'https://maven.minecraftforge.net' }\n        maven { url = 'https://maven.fabricmc.net' }\n        maven { url = 'https://maven.quiltmc.org/repository/release/' }\n        maven { url = 'https://maven.neoforged.net/releases/' }\n    }\n    dependencies {\n        classpath \"org.moddingx:PackDev:${packdev_version}\"\n    }\n}\n</code></pre> <p>Depending on which loader your modpack uses, you might need to add additional artifacts to the classpath. More information can be found on the loader-specific pages.</p>"},{"location":"getting-started.html","title":"Getting started","text":"<p>After applying the gradle plugin to your build, you'll need to configure your build. This document briefly lists the main aspects of getting a working build. For more information, see the other pages in this wiki.</p>"},{"location":"getting-started.html#the-modlist","title":"The modlist","text":"<p>The packs modlist is stored in a file named <code>modlist.json</code> in the project root directory. Mods are pulled from a supported modding platform. The <code>modlist.json</code> file can be edited through Moonstone with a graphical UI where you can search for mods and install them with one click. The <code>modlist.json</code> also contains information on which side (client, server or both) a mod should be installed as well as the minecraft version to use and the mod loader.</p>"},{"location":"getting-started.html#the-modpack-block","title":"The modpack block","text":"<p>The rest of the modpack configuration is done in the <code>modpack</code> block in your <code>build.gradle</code>:</p> <pre><code>modpack {\n    loader('0.19.2')\n    targets {\n        curse(12345)\n        modrinth()\n    }\n}\n</code></pre> <p>This instructs PackDev to use loader version <code>0.19.2</code> (the meaning of this depends on the loader used) and build a curseforge and a modrinth pack. Built targets can be found in <code>build/target</code> after executing <code>gradle build</code>.</p> <p>PackDev will then apply and configure a matching gradle plugin for your loader (ForgeGradle or loom).</p>"},{"location":"getting-started.html#overrides","title":"Overrides","text":"<p>Overrides can be put in <code>data/common</code> for overrides on both client and server and <code>data/client</code> and <code>data/server</code> fo side-specific overrides.</p>"},{"location":"getting-started.html#run-the-game","title":"Run the game","text":"<p>You can run the game via <code>gradle runClient</code> or <code>gradle runServer</code>. This will run a client or server respectively. The <code>.minecraft</code> directory of these runs is <code>runs/client</code> or <code>runs/server</code> inside your project root. This is also where mods will create their configs. If you want to change them, you need to copy them into the matching override folder first.</p>"},{"location":"loaders/fabric.html","title":"Fabric modpacks","text":"<p>To use Fabric Loader as mod-loader, set the <code>loader</code> field to <code>fabric</code>.</p> <p>Fabric modpacks use the fabric-loom plugin, so it has to be present on the classpath.</p>"},{"location":"loaders/fabric.html#fabric-example","title":"Fabric Example","text":"<p><code>build.gradle:</code></p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url = 'https://maven.moddingx.org/' }\n        maven { url = 'https://maven.minecraftforge.net' }\n        maven { url = 'https://maven.fabricmc.net' }\n    }\n    dependencies {\n        classpath \"org.moddingx:PackDev:${packdev_version}\"\n        classpath \"net.fabricmc:fabric-loom:${loom_version}\"\n    }\n}\n\napply plugin: 'org.moddingx.packdev'\n\nversion = '1'\n\nmodpack {\n    loader '0.14.21'\n    targets {\n        multimc()\n    }\n}\n</code></pre> <p><code>modlist.json</code></p> <pre><code>{\n  \"api\": 2,\n  \"platform\": \"modrinth\",\n  \"loader\": \"fabric\",\n  \"minecraft\": \"1.19.2\",\n  \"installed\": [],\n  \"dependencies\": []\n}\n</code></pre>"},{"location":"loaders/forge.html","title":"Forge modpacks","text":"<p>To use MinecraftForge as mod-loader, set the <code>loader</code> field to <code>forge</code>.</p> <p>Forge modpacks use the ForgeGradle plugin, so it has to be present on the classpath.</p>"},{"location":"loaders/forge.html#forge-example","title":"Forge Example","text":"<p><code>build.gradle:</code></p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url = 'https://maven.moddingx.org/' }\n        maven { url = 'https://maven.minecraftforge.net' }\n    }\n    dependencies {\n        classpath \"org.moddingx:PackDev:${packdev_version}\"\n        classpath \"net.minecraftforge.gradle:ForgeGradle:${forgegradle_version}\"\n    }\n}\n\napply plugin: 'org.moddingx.packdev'\n\nversion = '1'\n\nmodpack {\n    loader '45.1.16'\n    targets {\n        multimc()\n    }\n}\n</code></pre> <p><code>modlist.json</code></p> <pre><code>{\n  \"api\": 2,\n  \"platform\": \"modrinth\",\n  \"loader\": \"forge\",\n  \"minecraft\": \"1.19.4\",\n  \"installed\": [],\n  \"dependencies\": []\n}\n</code></pre>"},{"location":"loaders/neoforge.html","title":"NeoForge modpacks","text":"<p>To use NeoForge as mod-loader, set the <code>loader</code> field to <code>neoforge</code>.</p> <p>NeoForge modpacks use the NeoGradle plugin, so it has to be present on the classpath.</p>"},{"location":"loaders/neoforge.html#forge-example","title":"Forge Example","text":"<p><code>build.gradle:</code></p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url = 'https://maven.moddingx.org/' }\n        maven { url = 'https://maven.minecraftforge.net' }\n        maven { url = 'https://maven.neoforged.net/releases' }\n    }\n    dependencies {\n        classpath \"org.moddingx:PackDev:${packdev_version}\"\n        classpath \"net.neoforged.gradle:userdev:${neogradle_version}\"\n    }\n}\n\napply plugin: 'org.moddingx.packdev'\n\nversion = '1'\n\nmodpack {\n    loader '20.4.79-beta'\n    targets {\n        server()\n    }\n}\n</code></pre> <p><code>modlist.json</code></p> <pre><code>{\n  \"api\": 2,\n  \"platform\": \"modrinth\",\n  \"loader\": \"neoforge\",\n  \"minecraft\": \"1.20.4\",\n  \"installed\": [],\n  \"dependencies\": []\n}\n</code></pre>"},{"location":"loaders/quilt.html","title":"Quilt modpacks","text":"<p>To use Quilt Loader as mod-loader, set the <code>loader</code> field to <code>quilt</code>.</p> <p>Quilt modpacks use the quilt-loom plugin, so it has to be present on the classpath.</p>"},{"location":"loaders/quilt.html#quilt-example","title":"Quilt Example","text":"<p><code>build.gradle:</code></p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url = 'https://maven.moddingx.org/' }\n        maven { url = 'https://maven.minecraftforge.net' }\n        maven { url = 'https://maven.fabricmc.net' }\n        maven { url = 'https://maven.quiltmc.org/repository/release/' }\n    }\n    dependencies {\n        classpath \"org.moddingx:PackDev:${packdev_version}\"\n        classpath \"org.quiltmc:loom:${loom_version}\"\n    }\n}\n\napply plugin: 'org.moddingx.packdev'\n\nversion = '1'\n\nmodpack {\n    loader '0.19.2'\n    targets {\n        multimc()\n    }\n}\n</code></pre> <p><code>modlist.json</code></p> <pre><code>{\n  \"api\": 2,\n  \"platform\": \"modrinth\",\n  \"loader\": \"quilt\",\n  \"minecraft\": \"1.19.2\",\n  \"installed\": [],\n  \"dependencies\": []\n}\n</code></pre>"},{"location":"modpack/configuration.html","title":"Build Configuration","text":"<p>Besides the modlist, the <code>modpack</code> block in the buildscript is the main location for modpack configuration. Here you'll find all options, you can set in the <code>modpack</code> block.</p>"},{"location":"modpack/configuration.html#loader","title":"Loader","text":"<p>The loader option configures the used mod-loader. This option is mandatory. The loader version can be set like this:</p> <pre><code>modpack {\n    loader '42.1.0'\n}\n</code></pre> <p>By default PackDev runs on the intermediate mapping format used by the mod-loader (SRG on forge and intermediary on fabric and quilt). If you want to debug an issue in your modpack and use a debugger, these cryptic names can be a problem. To make debugging easier, you can advise PackDev to remap to the official mojang mappings like this:</p> <pre><code>modpack {\n    loader '42.1.0', {\n        useOfficialMappings()\n    }\n}\n</code></pre> <p>Note that NeoForge already uses official mappings as their intermediate mapping format. <code>useOfficialMappings()</code> therefore has no effect when used with NeoForge other than emitting a warning message that it's redundant.</p> Problem with official mappings <p>Using the official mappings can cause a variety of problems, so be sure to try without them before reporting issues.  Especially on Forge before version <code>1.17</code> you can expect build failures with official mappings.</p>"},{"location":"modpack/configuration.html#author","title":"Author","text":"<p>You can set an optional modpack author that is used by some targets if available:</p> <pre><code>modpack {\n    author 'Rubber Duck'\n}\n</code></pre>"},{"location":"modpack/configuration.html#targets","title":"Targets","text":"<p>The targets block allows to configure build targets for your modpack:</p> <pre><code>modpack {\n    targets {\n        curse(12345)\n        modrinth()\n        server()\n        multimc()\n        target('id')\n    }\n}\n</code></pre>"},{"location":"modpack/configuration.html#curseforge","title":"CurseForge","text":"<p>The CurseForge target is added via <code>curse(projectId)</code> and builds a curse modpack that can be published on CurseForge. It contains only client data.</p>"},{"location":"modpack/configuration.html#modrinth","title":"Modrinth","text":"<p>The Modrinth target is added via <code>modrinth()</code> and builds a modrinth pack that can be published on Modrinth. It contains both client and server data.</p>"},{"location":"modpack/configuration.html#server","title":"Server","text":"<p>The Server target is added via <code>server()</code> and builds a server pack. It contains only server data as well as a python install script and a <code>Dockerfile</code> to run the server as a container.</p>"},{"location":"modpack/configuration.html#multimc","title":"MultiMC","text":"<p>The MultiMC target is added via <code>multimc()</code> and builds a MultiMC instance that can be imported using MultiMC. It contains only client data and shades all mods.</p>"},{"location":"modpack/configuration.html#3rd-party-targets","title":"3rd party targets","text":"<p>Addons to PackDev can add their own targets. These can be added using <code>target('id')</code> where <code>id</code> is the id of the target to add.</p>"},{"location":"modpack/modlist.html","title":"Modlist","text":"<p>The mod list is loaded from a file named <code>modlist.json</code>. Despite the mod list, this file also contains the following information:</p> <ul> <li>The modding platform that acts as source to obtain the mods. (Either CurseForge or Modrinth).</li> <li>The minecraft version of the modpack.</li> <li>The mod loader used in the modpack.</li> </ul> <p>Also it stores which mods have been manually installed and which mods were installed only as dependency.</p>"},{"location":"modpack/modlist.html#running-moonstone","title":"Running Moonstone","text":"<p>Moonstone is a graphical editor for the <code>modlist.json</code> file. There are two ways to use Moonstone:</p> <ul> <li>You can use Moonstone as an IntelliJ plugin to edit the modlist directly from your IDE.     See https://moddingx.org/jetbrains for more information on how to add Moonstone to your IDE.</li> <li>You can also launch Moonstone with the <code>moonstone</code> gradle task.     This will open your modlist as a standalone application.</li> </ul> Tip <p>If you're running Moonstone through the <code>moonstone</code> gradle task and prefer a light theme, add <code>moonstone.theme=light</code> to your <code>gradle.properties</code> file.</p>"},{"location":"modpack/modlist.html#json-format","title":"JSON format","text":"<p>The contents of the <code>modlist.json</code> file should be a json object with the following format:</p> <ul> <li><code>platform</code>: A string that indicates the modding platform. Currently, supported values are <code>curseforge</code> and <code>modrinth</code>.</li> <li><code>loader</code>: A string describing the mod loader for the modpack.</li> <li><code>minecraft</code>: The minecraft version that the modpack uses.</li> <li><code>installed</code>: A list of mod files that are explicitly installed.</li> <li><code>dependencies</code>: A list of mod files that are installed only as dependencies for other files.</li> </ul> <p>A mod file describes a json object with the following format:</p> <ul> <li><code>project</code>: The project id</li> <li><code>file</code>: The file id</li> <li><code>side</code>: Where that mod is required. Either <code>common</code>, <code>client</code> or <code>server</code></li> <li><code>locked</code>: Whether this dependency is locked, so it can't be updated.</li> </ul>"},{"location":"targets/curseforge.html","title":"The CurseForge target","text":"<p>The CurseForge target builds a modpack zip for upload on CurseForge. CurseForge modpacks need to contain a CurseForge project id, which is set during build configuration.</p> Cross-platform building <p>It is possible to build a CurseForge pack even if the modlist uses Modrinth as a platform.  PackDev will match all mods to their CurseForge projects using fingerprints.  If, however, there are mods in the modpack, that are not hosted on CurseForge the build will fail.</p>"},{"location":"targets/curseforge.html#automatic-publishing","title":"Automatic publishing","text":"<p>You can publish the built CurseForge modpack automatically using CurseForgeGradle. A basic upload task could look like this:</p> <pre><code>task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {\n    apiToken = findProperty('curseforge_token')\n    projectId = 12345\n    def mainFile = upload(projectId, buildCursePack)\n}\n</code></pre> <p>For more inforation, see https://github.com/Darkhax/CurseForgeGradle.</p>"},{"location":"targets/modrinth.html","title":"The Modrinth target","text":"<p>The Modrinth target builds a modpack archive for upload on Modrinth. Modrinth packs contain both client and server data and are supported by a variety of pack installers.</p> Cross-platform building <p>It is possible to build a Modrinth pack even if the modlist uses CurseForge as a platform.  PackDev will match all mods to their Modrinth projects using hashes.  If, however, there are mods in the modpack, that are not hosted on Modrinth the build will fail.</p>"},{"location":"targets/modrinth.html#automatic-publishing","title":"Automatic publishing","text":"<p>You can publish the built Modrinth pack automatically using Minotaur. A basic upload task could look like this:</p> <pre><code>modrinth {\n    token = System.getenv(\"MODRINTH_TOKEN\")\n    projectId = \"my-project\"\n    uploadFile = buildModrinthPack\n}\n</code></pre> <p>For more inforation, see https://github.com/modrinth/minotaur.</p>"},{"location":"targets/multimc.html","title":"The MultiMC target","text":"<p>The MultiMC target builds instances for the MultiMC launcher.</p> Publishing MultiMC instances <p>In contrast to other targets, the MultiMC instances will contain all mods directly instead of them being downloaded upon installing the pack.  This makes MultiMC instances very large.  So while they might be useful for some advanced users, consider publishing a Modrinth pack instead, as MultiMC can install these as well.</p>"},{"location":"targets/server.html","title":"The Server target","text":"<p>The Server target builds a <code>zip</code> for easy server setup. It comes with a python install script to set up the server and download all mods. After extracting the server, run</p> <pre><code>python install_server.py\n</code></pre> <p>to install the server and download all mods. You can then start it using <code>./run.sh</code> on Linux or <code>.\\run.bat</code> on Windows. There is also a <code>Dockerfile</code> that allows running the server in a Docker container.</p>"}]}